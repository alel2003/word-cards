services:
  db:
    image: postgres
    restart: always
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - '5433:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      retries: 5
      timeout: 5s

  redis:
    image: redis:latest
    restart: always
    container_name: redis
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      retries: 5
      timeout: 5s

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nest-docker-app
    environment:
      - PORT=${PORT}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - ACCESS_TOKEN_VALIDITY_DURATION_IN_SEC=${ACCESS_TOKEN_VALIDITY_DURATION_IN_SEC}
      - REFRESH_TOKEN_VALIDITY_DURATION_IN_SEC=${REFRESH_TOKEN_VALIDITY_DURATION_IN_SEC}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - '${PORT}:${PORT}'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src
    command: >
      sh -c "npx prisma migrate dev --name init && npx prisma generate && npm run build && npm run start:dev"

volumes:
  pgdata:
  redis_data:
